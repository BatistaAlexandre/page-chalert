import './styles/index';
import type { App } from 'vue';
export * from './composables';
declare const VueEasyLightbox: {
    new (...args: any[]): {
        $: import("vue").ComponentInternalInstance;
        $data: {};
        $props: Partial<{
            index: number;
            rtl: boolean;
            visible: boolean;
            loop: boolean;
            rotateDisabled: boolean;
            zoomDisabled: boolean;
            imgs: import("./types").PropsImgs;
            scrollDisabled: boolean;
            escDisabled: boolean;
            moveDisabled: boolean;
            titleDisabled: boolean;
            maskClosable: boolean;
            teleport: string | import("vue").RendererElement | null | undefined;
            swipeTolerance: number;
            zoomScale: number;
            maxZoom: number;
            minZoom: number;
            pinchDisabled: boolean;
        }> & Omit<Readonly<import("vue").ExtractPropTypes<{
            imgs: {
                type: import("vue").PropType<import("./types").PropsImgs>;
                default: () => string;
            };
            visible: {
                type: BooleanConstructor;
                default: boolean;
            };
            index: {
                type: NumberConstructor;
                default: number;
            };
            scrollDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            escDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            moveDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            titleDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            maskClosable: {
                type: BooleanConstructor;
                default: boolean;
            };
            teleport: {
                type: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                default: null;
            };
            swipeTolerance: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            rtl: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomScale: {
                type: NumberConstructor;
                default: number;
            };
            maxZoom: {
                type: NumberConstructor;
                default: number;
            };
            minZoom: {
                type: NumberConstructor;
                default: number;
            };
            rotateDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            pinchDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onHide?: (() => any) | undefined;
            "onOn-error"?: ((e: Event) => any) | undefined;
            "onOn-prev"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-next"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-prev-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-next-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-index-change"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-rotate"?: ((deg: number) => any) | undefined;
        } & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, "index" | "rtl" | "visible" | "loop" | "rotateDisabled" | "zoomDisabled" | "imgs" | "scrollDisabled" | "escDisabled" | "moveDisabled" | "titleDisabled" | "maskClosable" | "teleport" | "swipeTolerance" | "zoomScale" | "maxZoom" | "minZoom" | "pinchDisabled">;
        $attrs: {
            [x: string]: unknown;
        };
        $refs: {
            [x: string]: unknown;
        };
        $slots: Readonly<{
            [name: string]: import("vue").Slot | undefined;
        }>;
        $root: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $parent: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null;
        $emit: ((event: "hide") => void) & ((event: "on-error", e: Event) => void) & ((event: "on-prev", oldIndex: number, newIndex: number) => void) & ((event: "on-next", oldIndex: number, newIndex: number) => void) & ((event: "on-prev-click", oldIndex: number, newIndex: number) => void) & ((event: "on-next-click", oldIndex: number, newIndex: number) => void) & ((event: "on-index-change", oldIndex: number, newIndex: number) => void) & ((event: "on-rotate", deg: number) => void);
        $el: any;
        $options: import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
            imgs: {
                type: import("vue").PropType<import("./types").PropsImgs>;
                default: () => string;
            };
            visible: {
                type: BooleanConstructor;
                default: boolean;
            };
            index: {
                type: NumberConstructor;
                default: number;
            };
            scrollDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            escDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            moveDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            titleDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            maskClosable: {
                type: BooleanConstructor;
                default: boolean;
            };
            teleport: {
                type: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
                default: null;
            };
            swipeTolerance: {
                type: NumberConstructor;
                default: number;
            };
            loop: {
                type: BooleanConstructor;
                default: boolean;
            };
            rtl: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomScale: {
                type: NumberConstructor;
                default: number;
            };
            maxZoom: {
                type: NumberConstructor;
                default: number;
            };
            minZoom: {
                type: NumberConstructor;
                default: number;
            };
            rotateDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            zoomDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
            pinchDisabled: {
                type: BooleanConstructor;
                default: boolean;
            };
        }>> & {
            onHide?: (() => any) | undefined;
            "onOn-error"?: ((e: Event) => any) | undefined;
            "onOn-prev"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-next"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-prev-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-next-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-index-change"?: ((oldIndex: number, newIndex: number) => any) | undefined;
            "onOn-rotate"?: ((deg: number) => any) | undefined;
        }, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
            hide: () => true;
            'on-error': (e: Event) => true;
            'on-prev': (oldIndex: number, newIndex: number) => true;
            'on-next': (oldIndex: number, newIndex: number) => true;
            'on-prev-click': (oldIndex: number, newIndex: number) => true;
            'on-next-click': (oldIndex: number, newIndex: number) => true;
            'on-index-change': (oldIndex: number, newIndex: number) => true;
            'on-rotate': (deg: number) => true;
        }, string, {
            index: number;
            rtl: boolean;
            visible: boolean;
            loop: boolean;
            rotateDisabled: boolean;
            zoomDisabled: boolean;
            imgs: import("./types").PropsImgs;
            scrollDisabled: boolean;
            escDisabled: boolean;
            moveDisabled: boolean;
            titleDisabled: boolean;
            maskClosable: boolean;
            teleport: string | import("vue").RendererElement | null | undefined;
            swipeTolerance: number;
            zoomScale: number;
            maxZoom: number;
            minZoom: number;
            pinchDisabled: boolean;
        }, {}, string> & {
            beforeCreate?: ((() => void) | (() => void)[]) | undefined;
            created?: ((() => void) | (() => void)[]) | undefined;
            beforeMount?: ((() => void) | (() => void)[]) | undefined;
            mounted?: ((() => void) | (() => void)[]) | undefined;
            beforeUpdate?: ((() => void) | (() => void)[]) | undefined;
            updated?: ((() => void) | (() => void)[]) | undefined;
            activated?: ((() => void) | (() => void)[]) | undefined;
            deactivated?: ((() => void) | (() => void)[]) | undefined;
            beforeDestroy?: ((() => void) | (() => void)[]) | undefined;
            beforeUnmount?: ((() => void) | (() => void)[]) | undefined;
            destroyed?: ((() => void) | (() => void)[]) | undefined;
            unmounted?: ((() => void) | (() => void)[]) | undefined;
            renderTracked?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            renderTriggered?: (((e: import("vue").DebuggerEvent) => void) | ((e: import("vue").DebuggerEvent) => void)[]) | undefined;
            errorCaptured?: (((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void) | ((err: unknown, instance: import("vue").ComponentPublicInstance<{}, {}, {}, {}, {}, {}, {}, {}, false, import("vue").ComponentOptionsBase<any, any, any, any, any, any, any, any, any, {}, {}, string>, {}> | null, info: string) => boolean | void)[]) | undefined;
        };
        $forceUpdate: () => void;
        $nextTick: typeof import("vue").nextTick;
        $watch<T extends string | ((...args: any) => any)>(source: T, cb: T extends (...args: any) => infer R ? (args_0: R, args_1: R) => any : (...args: any) => any, options?: import("vue").WatchOptions<boolean> | undefined): import("vue").WatchStopHandle;
    } & Readonly<import("vue").ExtractPropTypes<{
        imgs: {
            type: import("vue").PropType<import("./types").PropsImgs>;
            default: () => string;
        };
        visible: {
            type: BooleanConstructor;
            default: boolean;
        };
        index: {
            type: NumberConstructor;
            default: number;
        };
        scrollDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        escDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        moveDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        titleDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        maskClosable: {
            type: BooleanConstructor;
            default: boolean;
        };
        teleport: {
            type: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
            default: null;
        };
        swipeTolerance: {
            type: NumberConstructor;
            default: number;
        };
        loop: {
            type: BooleanConstructor;
            default: boolean;
        };
        rtl: {
            type: BooleanConstructor;
            default: boolean;
        };
        zoomScale: {
            type: NumberConstructor;
            default: number;
        };
        maxZoom: {
            type: NumberConstructor;
            default: number;
        };
        minZoom: {
            type: NumberConstructor;
            default: number;
        };
        rotateDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        zoomDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
        pinchDisabled: {
            type: BooleanConstructor;
            default: boolean;
        };
    }>> & {
        onHide?: (() => any) | undefined;
        "onOn-error"?: ((e: Event) => any) | undefined;
        "onOn-prev"?: ((oldIndex: number, newIndex: number) => any) | undefined;
        "onOn-next"?: ((oldIndex: number, newIndex: number) => any) | undefined;
        "onOn-prev-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
        "onOn-next-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
        "onOn-index-change"?: ((oldIndex: number, newIndex: number) => any) | undefined;
        "onOn-rotate"?: ((deg: number) => any) | undefined;
    } & import("vue").ShallowUnwrapRef<() => JSX.Element> & {} & import("vue").ComponentCustomProperties & {};
    __isFragment?: undefined;
    __isTeleport?: undefined;
    __isSuspense?: undefined;
} & import("vue").ComponentOptionsBase<Readonly<import("vue").ExtractPropTypes<{
    imgs: {
        type: import("vue").PropType<import("./types").PropsImgs>;
        default: () => string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    index: {
        type: NumberConstructor;
        default: number;
    };
    scrollDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    escDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    moveDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    titleDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: import("vue").PropType<string | import("vue").RendererElement | null | undefined>;
        default: null;
    };
    swipeTolerance: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    rtl: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomScale: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    rotateDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    pinchDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onHide?: (() => any) | undefined;
    "onOn-error"?: ((e: Event) => any) | undefined;
    "onOn-prev"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-next"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-prev-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-next-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-index-change"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-rotate"?: ((deg: number) => any) | undefined;
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    hide: () => true;
    'on-error': (e: Event) => true;
    'on-prev': (oldIndex: number, newIndex: number) => true;
    'on-next': (oldIndex: number, newIndex: number) => true;
    'on-prev-click': (oldIndex: number, newIndex: number) => true;
    'on-next-click': (oldIndex: number, newIndex: number) => true;
    'on-index-change': (oldIndex: number, newIndex: number) => true;
    'on-rotate': (deg: number) => true;
}, string, {
    index: number;
    rtl: boolean;
    visible: boolean;
    loop: boolean;
    rotateDisabled: boolean;
    zoomDisabled: boolean;
    imgs: import("./types").PropsImgs;
    scrollDisabled: boolean;
    escDisabled: boolean;
    moveDisabled: boolean;
    titleDisabled: boolean;
    maskClosable: boolean;
    teleport: string | import("vue").RendererElement | null | undefined;
    swipeTolerance: number;
    zoomScale: number;
    maxZoom: number;
    minZoom: number;
    pinchDisabled: boolean;
}, {}, string> & import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps & {
    install: (app: App) => void;
};
export default VueEasyLightbox;
