import { PropType } from 'vue';
import { PropsImgs } from './types';
declare const _default: import("vue").DefineComponent<{
    imgs: {
        type: PropType<PropsImgs>;
        default: () => string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    index: {
        type: NumberConstructor;
        default: number;
    };
    scrollDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    escDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    moveDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    titleDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<string | import("vue").RendererElement | null | undefined>;
        default: null;
    };
    swipeTolerance: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    rtl: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomScale: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    rotateDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    pinchDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}, () => JSX.Element, unknown, {}, {}, import("vue").ComponentOptionsMixin, import("vue").ComponentOptionsMixin, {
    hide: () => true;
    'on-error': (e: Event) => true;
    'on-prev': (oldIndex: number, newIndex: number) => true;
    'on-next': (oldIndex: number, newIndex: number) => true;
    'on-prev-click': (oldIndex: number, newIndex: number) => true;
    'on-next-click': (oldIndex: number, newIndex: number) => true;
    'on-index-change': (oldIndex: number, newIndex: number) => true;
    'on-rotate': (deg: number) => true;
}, string, import("vue").VNodeProps & import("vue").AllowedComponentProps & import("vue").ComponentCustomProps, Readonly<import("vue").ExtractPropTypes<{
    imgs: {
        type: PropType<PropsImgs>;
        default: () => string;
    };
    visible: {
        type: BooleanConstructor;
        default: boolean;
    };
    index: {
        type: NumberConstructor;
        default: number;
    };
    scrollDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    escDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    moveDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    titleDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    maskClosable: {
        type: BooleanConstructor;
        default: boolean;
    };
    teleport: {
        type: PropType<string | import("vue").RendererElement | null | undefined>;
        default: null;
    };
    swipeTolerance: {
        type: NumberConstructor;
        default: number;
    };
    loop: {
        type: BooleanConstructor;
        default: boolean;
    };
    rtl: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomScale: {
        type: NumberConstructor;
        default: number;
    };
    maxZoom: {
        type: NumberConstructor;
        default: number;
    };
    minZoom: {
        type: NumberConstructor;
        default: number;
    };
    rotateDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    zoomDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
    pinchDisabled: {
        type: BooleanConstructor;
        default: boolean;
    };
}>> & {
    onHide?: (() => any) | undefined;
    "onOn-error"?: ((e: Event) => any) | undefined;
    "onOn-prev"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-next"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-prev-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-next-click"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-index-change"?: ((oldIndex: number, newIndex: number) => any) | undefined;
    "onOn-rotate"?: ((deg: number) => any) | undefined;
}, {
    index: number;
    rtl: boolean;
    visible: boolean;
    loop: boolean;
    rotateDisabled: boolean;
    zoomDisabled: boolean;
    imgs: PropsImgs;
    scrollDisabled: boolean;
    escDisabled: boolean;
    moveDisabled: boolean;
    titleDisabled: boolean;
    maskClosable: boolean;
    teleport: string | import("vue").RendererElement | null | undefined;
    swipeTolerance: number;
    zoomScale: number;
    maxZoom: number;
    minZoom: number;
    pinchDisabled: boolean;
}>;
export default _default;
